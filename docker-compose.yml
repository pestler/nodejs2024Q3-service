services:
  database:
    image: postgres:17.2-alpine
    build:
      context: .
      dockerfile: ./postgre-db/Dockerfile
    restart: always              
    env_file:
      - .env
    environment:
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}    
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    networks:
      - network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}", "-h", "database", "-p", "${POSTGRES_PORT}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s


  app:   
    build:
      context: .
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - ${PORT}:${PORT}
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - /app/node_modules    
    networks:
      - network
    develop:
      watch:
        - action: sync
          path: ./src
          target: /app/src
        - action: sync+restart
          path: ./config
          target: /app/config
          ignore:
            - node_modules/    
    
volumes:
  postgres_data:
  postgres_logs:  

networks:
  network:
    driver: bridge